continue
continuw
params[:name][:id].present?
params[:name][:id]
params[:name]
continue
@data1
continue
@data1.reject!{|a| a[0][0]==nil}
@data1
@data1.reject!{|a| a[0][0]==nil}
@data1.reject{|a| a[0][0]==nil}
@data1.reject{|a| a[0][0]==" "}
@data1.select{|a| a[0][0]=="Sci"}
@data1.select{|a| a[0][0]==""}
@data1.select{|a| a[0][0]!=""}
@data1.select{|a| a[0][0]=="Sci"}
@data1.selec{|a| a[0][0]=="Sci"}
@data1.reject{|a| a[0][0]=="Sci"}
@data1[0][1]
@data1[0][0]
@data1[0]
@data1.reject{|a| a[0][0]==""}
@data1.reject{|a| a[0][0]=="Sci"}
@data1.reject{|a| a[1][1]=="Sci"}
@data1.reject{|a| a[0][1]=="Sci"}
@data1.reject{|a| a[0][1]}
@data1.reject{|a| a[1][0]}
@data1.reject{|a| a[1]}
@data1.reject{|a| a[0]}
@data1.reject{|a| a[0][1]}
@data1.reject{|a| a[0][1]==""}
@data1.reject{|a| a[0][1]}
@data1.reject{|a| a[0][0]}
@data1.reject{|a| a[0][0]==""}
@data1.reject{|a| a}
@data1
continue
continuw
@data1
@data1.map{|a| a}
t=@data1.map{|a| a}
t=@data1.map{|a| a[0][0]}
t=@data1.select!{|a| a[0][0]}
t=@data1.selecr!{|a| a[0][0]}
t=@data1.reject!{|a| a[0][0]}
t
t=@data1.reject!{|a| a[0][0]==""}
@data1.reject!{|a| a[0][0]==""}
@data1.reject!{|a| a[0][0]=""}
@data1.map{|a| a}
@data1[0][1]
@data1[0][0]
@data1
per
att
@data1
per.zip(testname)
@data1[1]
@data1
continue
@data1
per
testname
std_sub_id
std
att
att.count
Result
att.count
att
continue
params[:city]
continue
params[:city]
continue
std=Student.find(params[:stud][:id]).standard_id
std=Standard.find_by(:student_id=>params[:stud][:id])
Test.find_by(:id=>7,:standard_subject_id=>17)
Test.find_by(:id=>7,:standard_subject_id=>25)
Test.find_by(:id=>1,:standard_subject_id=>25)
testname=att.pluck(:test_id,:percentage).map{|a,k| Test.find_by(:id=>a,:standard_subject_id=>std_sub_id[0])}
testname=att.pluck(:test_id,:percentage).map{|a,k| Test.find_by(:id=>a,:standard_subject_id=>std_sub_id[0]).test_name}
testname=att.pluck(:test_id,:percentage).map{|a,k| Test.find_by(:id=>a,:standard_subject_id=>std_sub_id[0]).pluck(:test_name)}
testname=att.pluck(:test_id,:percentage).map{|a,k| Test.where(:id=>a,:standard_subject_id=>std_sub_id[0]).pluck(:test_name)}
testname=att.pluck(:test_id,:percentage).map{|a,k| Test.where(:id=>a,:standard_subject_id=>std_sub_id[0])}
testname=att.pluck(:test_id,:percentage).map{|a,k| Test.where(:id=>a,:standard_subject_id=>std_sub_id[0]).test_name}
testname=att.pluck(:test_id,:percentage).map{|a,k| Test.where(:id=>a,:standard_subject_id=>std_sub_id[0]).pluck(:test_name)}
std_sub_id=StandardSubject.where(:standard_id => params[:stud][:id] ,:subject_id => params[:sub][:id]).pluck(:id)
params[:sub][:id]
continue
params[:id1]=="1"
params[:id1]==1
params[:id1]
continue
student
studend
params[:id]
continue
student
continue
@data1.map{|k,v| puts k,v }
@data1.map{|k,v| puts k }
@data1.map{|k,v| puts k v}
@data1.map{|k,v| puts k puts v}
@data1.map{|k,v| puts k,puts v}
@data1.map{|k,v| puts k,v}
@data1.map{|k,v| puts k}
@data1.first.second
@data1.first.seconf
@data1.first.first
@data1.first
@data1[1][0]
@data1[1]
@data1
continue
@graph.map{ |k,v| puts k,v }
@graph.map{ |k,v| puts k }
@graph.map{ |k,v| put k }
@graph.map{ |k,v| put k ,v}
@graph[0]
@graph
continue
@graph
continue
params
params[:second_stud][:id]
@graph
graph
grapg
params[:first_stud][:id]
params[:first_stud_id]
params[:first_stud]
params
continue
result.second
result.first.scond
result.first.first
result
continue
@result.second.first.second
@result.second.first
@result.second
@result.first
@result.first.second
@result.first
@result
@result.each do |result| result.first.scond end
@result.each do |result|
@result.first.second
@result.first.first
@result
continue
@grap
grap
continue
Result.where(:test_id=>params[:id]).pluck(:student_id,:percentage)
Result.where(:test_id=>params[:id]).pluck(:student_id,:percentag)
params[:id]
@grap
continue
rank
t
continue
continuw
rank
t
per
continue
per
rank
t
continue
t
rank
per
rank
t
continue
rank
t
continue
t
rank
t
rank
continue
refersh
referse
rank
rank.reverse!.index(test_avg_performance).to_i+1
continue
continuw
rank.reverse!.index(test_avg_performance).to_i+1
rank.reverse!
rank.reverse
rank
continue
rank
t
continue
contiie
t.index(test_avg_performance).to_i+1
rank.index(test_avg_performance).to_i+1
t.index(18)+1
t.index(18)
t
rank
continue
rank
rnk
continue
rnk
continue
rank.reverse!
rank
ranl
continue
return rank.index(test_avg_performance).to_i+1
rank.reverse!
test_avg_performance
rank.index(test_avg_performance).to_i+1
rank
continue
rank=rank.reverse!
rank=rank.reverse
rank
rank.reverse!
rank.index(test_avg_performance).to_i+1
rank
ranl
continue
Student.where(:standard_id=>current_student.id).joins(:results).distinct.map{|stu| stu.results.map{|per| per.percentage}}
per.inspect
per
rank
continue
rank=per.map{|p| p.sum/p.size}
========================
rank
========================
continue
@current_admin
@current_teacher
current_teacher
current_admin
